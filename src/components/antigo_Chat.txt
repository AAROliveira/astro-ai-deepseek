import React, { useState, useEffect, useRef } from "react";
import ReactMarkdown from "react-markdown";

const Chat = () => {
  const [messages, setMessages] = useState([
    { role: "assistant", content: "Olá! Como posso te ajudar hoje?" },
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Função para rolar até o final da lista de mensagens
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(scrollToBottom, [messages]); // Colocado dentro do escopo correto

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (input.trim() === "") return;

    setIsLoading(true);
    const newMessage = { role: "user", content: input.trim() };
    const updatedMessages = [...messages, newMessage];

    setMessages(updatedMessages);
    setInput("");

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ messages: updatedMessages }),
      });

      // Verifica se response.body existe
      if (!response.body) {
        throw new Error("No response body from server");
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      let assistantMessage = { role: "assistant", content: "" };

      // Adiciona a mensagem vazia do assistente para atualizar dinamicamente
      setMessages((prev) => [...prev, assistantMessage]);

      // Processa o stream NDJSON
      while (true) {
        const { value, done } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value, { stream: true });
        const lines = chunk.split("\n").filter((line) => line.trim() !== ""); // Divide as linhas NDJSON

        for (const line of lines) {
          try {
            const parsed = JSON.parse(line); // Parse cada linha como JSON
            if (parsed.message?.content) {
              assistantMessage.content += parsed.message.content; // Adiciona conteúdo ao assistente
              setMessages((prev) =>
                prev.map((msg, idx) =>
                  idx === prev.length - 1 ? assistantMessage : msg
                )
              );
            }
          } catch (err) {
            console.error("Erro ao processar a linha NDJSON:", err, line);
          }
        }
      }
    } catch (error) {
      console.error("Erro ao buscar resposta:", error);
      setMessages((prev) => [
        ...prev,
        { role: "assistant", content: "Erro ao processar sua solicitação." },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Chat com Gemma2</h1>
      <div className="bg-white rounded-lg shadow-md p-6 h-[500px] overflow-y-auto">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`mb-4 ${
              message.role === "user" ? "text-right" : "text-left"
            }`}
          >
            <div
              className={`inline-block px-4 py-2 rounded-lg ${
                message.role === "user"
                  ? "bg-blue-500 text-white"
                  : "bg-gray-200 text-gray-800"
              }`}
            >
              <ReactMarkdown>{message.content}</ReactMarkdown>
            </div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <form onSubmit={handleSubmit} className="mt-4">
        <div className="flex items-center">
          <input
            type="text"
            className="w-full border border-gray-400 rounded-lg py-2 px-4 mr-2 focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
            placeholder="Digite sua mensagem..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            disabled={isLoading}
          />
          <button
            type="submit"
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50"
            disabled={isLoading}
          >
            {isLoading ? "Enviando..." : "Enviar"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default Chat; // Certifique-se de exportar o componente
